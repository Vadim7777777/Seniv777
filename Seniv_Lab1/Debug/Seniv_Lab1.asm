; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\Users\Vadim\Documents\Visual Studio 2010\Projects\Seniv_Lab1\Seniv_Lab1\Seniv_Lab1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	?powi@@YAHHH@Z					; powi
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\vadim\documents\visual studio 2010\projects\seniv_lab1\seniv_lab1\seniv_lab1.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?powi@@YAHHH@Z
_TEXT	SEGMENT
_i$24910 = -20						; size = 4
_vali$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?powi@@YAHHH@Z PROC					; powi, COMDAT

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 14   : 	int vali = a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _vali$[ebp], eax

; 15   : 	for (int i = 1; i < b; i++)

	mov	DWORD PTR _i$24910[ebp], 1
	jmp	SHORT $LN3@powi
$LN2@powi:
	mov	eax, DWORD PTR _i$24910[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24910[ebp], eax
$LN3@powi:
	mov	eax, DWORD PTR _i$24910[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jge	SHORT $LN1@powi

; 16   : 		vali *= a;

	mov	eax, DWORD PTR _vali$[ebp]
	imul	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _vali$[ebp], eax
	jmp	SHORT $LN2@powi
$LN1@powi:

; 17   : 
; 18   : 	return vali;

	mov	eax, DWORD PTR _vali$[ebp]

; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?powi@@YAHHH@Z ENDP					; powi
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_0BH@IBPMBDCN@?6Random?5period?5is?5?$CFd?3?6?$AA@ ; `string'
PUBLIC	?GetPeriod@RandomPeriodCalculator@@QAEHPAH@Z	; RandomPeriodCalculator::GetPeriod
PUBLIC	?GetM@Random@@QAEHXZ				; Random::GetM
PUBLIC	??_C@_03IOBBOKCP@?6?$CFd?$AA@			; `string'
PUBLIC	?Next@Random@@QAEHXZ				; Random::Next
PUBLIC	??_C@_0CA@JMIDCNHK@?6How?5many?5numbers?5to?5generate?$DP?6?$AA@ ; `string'
PUBLIC	??_C@_08GGBJDDCD@file?4txt?$AA@			; `string'
PUBLIC	??_C@_02CHHAKFFB@w?$CL?$AA@			; `string'
PUBLIC	??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z	; RandomPeriodCalculator::RandomPeriodCalculator
PUBLIC	??0Random@@QAE@HHHH@Z				; Random::Random
PUBLIC	??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_0BM@BEMHKKGL@Then?5enter?5your?5own?5values?3?$AA@ ; `string'
PUBLIC	??_C@_0CC@PGFNFJNK@?6?5x?5?$DN?5?$CFd?0?5a?5?$DN?5?$CFd?0?5c?5?$DN?5?$CFd?0?5m?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BL@KKACHBHC@Use?5data?5of?56?9th?5variant?$DP?6?$AA@ ; `string'
PUBLIC	_wmain
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__fclose:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__fopen:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__getchar:PROC
EXTRN	__imp__scanf:PROC
EXTRN	__imp__printf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IBPMBDCN@?6Random?5period?5is?5?$CFd?3?6?$AA@
CONST	SEGMENT
??_C@_0BH@IBPMBDCN@?6Random?5period?5is?5?$CFd?3?6?$AA@ DB 0aH, 'Random p'
	DB	'eriod is %d:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IOBBOKCP@?6?$CFd?$AA@
CONST	SEGMENT
??_C@_03IOBBOKCP@?6?$CFd?$AA@ DB 0aH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JMIDCNHK@?6How?5many?5numbers?5to?5generate?$DP?6?$AA@
CONST	SEGMENT
??_C@_0CA@JMIDCNHK@?6How?5many?5numbers?5to?5generate?$DP?6?$AA@ DB 0aH, 'H'
	DB	'ow many numbers to generate?', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGBJDDCD@file?4txt?$AA@
CONST	SEGMENT
??_C@_08GGBJDDCD@file?4txt?$AA@ DB 'file.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02CHHAKFFB@w?$CL?$AA@
CONST	SEGMENT
??_C@_02CHHAKFFB@w?$CL?$AA@ DB 'w+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@ DB 0aH, 'm = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@ DB 0aH, 'c = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@ DB 0aH, 'a = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@ DB 0aH, 'X0 = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BEMHKKGL@Then?5enter?5your?5own?5values?3?$AA@
CONST	SEGMENT
??_C@_0BM@BEMHKKGL@Then?5enter?5your?5own?5values?3?$AA@ DB 'Then enter y'
	DB	'our own values:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PGFNFJNK@?6?5x?5?$DN?5?$CFd?0?5a?5?$DN?5?$CFd?0?5c?5?$DN?5?$CFd?0?5m?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0CC@PGFNFJNK@?6?5x?5?$DN?5?$CFd?0?5a?5?$DN?5?$CFd?0?5c?5?$DN?5?$CFd?0?5m?5?$DN?5?$CFd@ DB 0aH
	DB	' x = %d, a = %d, c = %d, m = %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKACHBHC@Use?5data?5of?56?9th?5variant?$DP?6?$AA@
CONST	SEGMENT
??_C@_0BL@KKACHBHC@Use?5data?5of?56?9th?5variant?$DP?6?$AA@ DB 'Use data '
	DB	'of 6-th variant?', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_wmain DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_wmain$0
__ehfuncinfo$_wmain DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$_wmain
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT _wmain
_TEXT	SEGMENT
tv148 = -444						; size = 4
$T25611 = -436						; size = 4
$T25612 = -424						; size = 4
$T25615 = -412						; size = 4
_i$24958 = -208						; size = 4
_period$ = -196						; size = 4
_periodVals$ = -184					; size = 4
_randomVal$24951 = -172					; size = 4
_i$24947 = -160						; size = 4
_n$ = -148						; size = 4
_f$ = -136						; size = 4
__randomPeriod$ = -124					; size = 24
__random$ = -92						; size = 16
_answer$ = -65						; size = 1
_m$ = -56						; size = 4
_c$ = -44						; size = 4
_a$ = -32						; size = 4
_x$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_wmain
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 432				; 000001b0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-444]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 23   : 	int x, a, c, m;
; 24   : 	char answer;
; 25   : 
; 26   : 	printf("%s", "Use data of 6-th variant?\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BL@KKACHBHC@Use?5data?5of?56?9th?5variant?$DP?6?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 	scanf("%c", &answer);

	mov	esi, esp
	lea	eax, DWORD PTR _answer$[ebp]
	push	eax
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : 
; 29   : 	if (answer == 'y' || answer == 'Y')

	movsx	eax, BYTE PTR _answer$[ebp]
	cmp	eax, 121				; 00000079H
	je	SHORT $LN8@wmain
	movsx	eax, BYTE PTR _answer$[ebp]
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN9@wmain
$LN8@wmain:

; 30   : 	{
; 31   : 		x = 64;

	mov	DWORD PTR _x$[ebp], 64			; 00000040H

; 32   : 		a = powi(2, 3);

	push	3
	push	2
	call	?powi@@YAHHH@Z				; powi
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax

; 33   : 		c = 8;

	mov	DWORD PTR _c$[ebp], 8

; 34   : 		m = powi(2, 15) - 1;

	push	15					; 0000000fH
	push	2
	call	?powi@@YAHHH@Z				; powi
	add	esp, 8
	sub	eax, 1
	mov	DWORD PTR _m$[ebp], eax

; 35   : 		printf("\n x = %d, a = %d, c = %d, m = %d\n", x, a, c, m);

	mov	esi, esp
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@PGFNFJNK@?6?5x?5?$DN?5?$CFd?0?5a?5?$DN?5?$CFd?0?5c?5?$DN?5?$CFd?0?5m?5?$DN?5?$CFd@
	call	DWORD PTR __imp__printf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 		getchar();

	mov	esi, esp
	call	DWORD PTR __imp__getchar
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   : 	}
; 38   : 	else

	jmp	$LN7@wmain
$LN9@wmain:

; 39   : 	{
; 40   : 		printf("%s", "Then enter your own values:");

	mov	esi, esp
	push	OFFSET ??_C@_0BM@BEMHKKGL@Then?5enter?5your?5own?5values?3?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   : 
; 42   : 		printf("\nX0 = ");

	mov	esi, esp
	push	OFFSET ??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 		scanf("%d", &x);

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : 
; 45   : 		printf("\na = ");

	mov	esi, esp
	push	OFFSET ??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 		scanf("%d", &a);

	mov	esi, esp
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 47   : 
; 48   : 		printf("\nc = ");

	mov	esi, esp
	push	OFFSET ??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 		scanf("%d", &c);

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   : 
; 51   : 		printf("\nm = ");

	mov	esi, esp
	push	OFFSET ??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 		scanf("%d", &m);

	mov	esi, esp
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@wmain:

; 53   : 	}
; 54   : 
; 55   : 	
; 56   : 
; 57   : // 	64, powi(2, 3), 8, powi(2, 15) - 1
; 58   : 	Random _random(x, a, c, m);

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	lea	ecx, DWORD PTR __random$[ebp]
	call	??0Random@@QAE@HHHH@Z			; Random::Random

; 59   : 	RandomPeriodCalculator _randomPeriod(new Random(x, a, c, m));

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T25612[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T25612[ebp], 0
	je	SHORT $LN12@wmain
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T25612[ebp]
	call	??0Random@@QAE@HHHH@Z			; Random::Random
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN13@wmain
$LN12@wmain:
	mov	DWORD PTR tv148[ebp], 0
$LN13@wmain:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T25611[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T25611[ebp]
	push	edx
	lea	ecx, DWORD PTR __randomPeriod$[ebp]
	call	??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z ; RandomPeriodCalculator::RandomPeriodCalculator

; 60   : 
; 61   : 	FILE *f = fopen("file.txt", "w+");

	mov	esi, esp
	push	OFFSET ??_C@_02CHHAKFFB@w?$CL?$AA@
	push	OFFSET ??_C@_08GGBJDDCD@file?4txt?$AA@
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _f$[ebp], eax

; 62   : 
; 63   : 	int n;
; 64   : 	printf("\nHow many numbers to generate?\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CA@JMIDCNHK@?6How?5many?5numbers?5to?5generate?$DP?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : 	scanf("%d", &n);

	mov	esi, esp
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	DWORD PTR __imp__scanf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   : 
; 67   : 	for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$24947[ebp], 0
	jmp	SHORT $LN6@wmain
$LN5@wmain:
	mov	eax, DWORD PTR _i$24947[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24947[ebp], eax
$LN6@wmain:
	mov	eax, DWORD PTR _i$24947[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN4@wmain

; 68   : 	{
; 69   : 		int randomVal = _random.Next();

	lea	ecx, DWORD PTR __random$[ebp]
	call	?Next@Random@@QAEHXZ			; Random::Next
	mov	DWORD PTR _randomVal$24951[ebp], eax

; 70   : 		printf("\n%d", randomVal);

	mov	esi, esp
	mov	eax, DWORD PTR _randomVal$24951[ebp]
	push	eax
	push	OFFSET ??_C@_03IOBBOKCP@?6?$CFd?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 71   : 		fprintf(f, "\n%d", randomVal);

	mov	esi, esp
	mov	eax, DWORD PTR _randomVal$24951[ebp]
	push	eax
	push	OFFSET ??_C@_03IOBBOKCP@?6?$CFd?$AA@
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : 	}

	jmp	SHORT $LN5@wmain
$LN4@wmain:

; 73   : 
; 74   : 	int *periodVals = new int[_random.GetM()];

	lea	ecx, DWORD PTR __random$[ebp]
	call	?GetM@Random@@QAEHXZ			; Random::GetM
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T25615[ebp], eax
	mov	eax, DWORD PTR $T25615[ebp]
	mov	DWORD PTR _periodVals$[ebp], eax

; 75   : 
; 76   : 	int period = _randomPeriod.GetPeriod(periodVals);

	mov	eax, DWORD PTR _periodVals$[ebp]
	push	eax
	lea	ecx, DWORD PTR __randomPeriod$[ebp]
	call	?GetPeriod@RandomPeriodCalculator@@QAEHPAH@Z ; RandomPeriodCalculator::GetPeriod
	mov	DWORD PTR _period$[ebp], eax

; 77   : 	printf("\nRandom period is %d:\n", period);

	mov	esi, esp
	mov	eax, DWORD PTR _period$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@IBPMBDCN@?6Random?5period?5is?5?$CFd?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   : 	fprintf(f, "\nRandom period is %d:\n", period);

	mov	esi, esp
	mov	eax, DWORD PTR _period$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@IBPMBDCN@?6Random?5period?5is?5?$CFd?3?6?$AA@
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 79   : 
; 80   : 	for (int i = 0; i < period; i++)

	mov	DWORD PTR _i$24958[ebp], 0
	jmp	SHORT $LN3@wmain
$LN2@wmain:
	mov	eax, DWORD PTR _i$24958[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24958[ebp], eax
$LN3@wmain:
	mov	eax, DWORD PTR _i$24958[ebp]
	cmp	eax, DWORD PTR _period$[ebp]
	jge	SHORT $LN1@wmain

; 81   : 	{
; 82   : 		printf("%d ", periodVals[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$24958[ebp]
	mov	ecx, DWORD PTR _periodVals$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 83   : 		fprintf(f, "%d ", periodVals[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$24958[ebp]
	mov	ecx, DWORD PTR _periodVals$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : 	}

	jmp	SHORT $LN2@wmain
$LN1@wmain:

; 85   : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 86   : 	fprintf(f, "\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 87   : 
; 88   : 	fclose(f);

	mov	esi, esp
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 89   : 
; 90   : 	return 0;

	xor	eax, eax

; 91   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@wmain
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 444				; 000001bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN25@wmain:
	DD	8
	DD	$LN24@wmain
$LN24@wmain:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN15@wmain
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN16@wmain
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN17@wmain
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN18@wmain
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN19@wmain
	DD	-92					; ffffffa4H
	DD	16					; 00000010H
	DD	$LN20@wmain
	DD	-124					; ffffff84H
	DD	24					; 00000018H
	DD	$LN21@wmain
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN22@wmain
$LN22@wmain:
	DB	110					; 0000006eH
	DB	0
$LN21@wmain:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN20@wmain:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
$LN19@wmain:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN18@wmain:
	DB	109					; 0000006dH
	DB	0
$LN17@wmain:
	DB	99					; 00000063H
	DB	0
$LN16@wmain:
	DB	97					; 00000061H
	DB	0
$LN15@wmain:
	DB	120					; 00000078H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_wmain$0:
	mov	eax, DWORD PTR $T25612[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$_wmain:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-448]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_wmain
	jmp	___CxxFrameHandler3
text$x	ENDS
_wmain	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\vadim\documents\visual studio 2010\projects\seniv_lab1\seniv_lab1\random.h
;	COMDAT ??0Random@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_a$ = 12						; size = 4
_c$ = 16						; size = 4
_m$ = 20						; size = 4
??0Random@@QAE@HHHH@Z PROC				; Random::Random, COMDAT
; _this$ = ecx

; 14   : 	  _x(x), _a(a), _c(c), _m(m) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Random@@QAE@HHHH@Z ENDP				; Random::Random
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Next@Random@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Next@Random@@QAEHXZ PROC				; Random::Next, COMDAT
; _this$ = ecx

; 22   : 	  {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 		  return (_x = (_a * _x + _c) % _m);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	imul	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 24   : 	  }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@Random@@QAEHXZ ENDP				; Random::Next
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetM@Random@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetM@Random@@QAEHXZ PROC				; Random::GetM, COMDAT
; _this$ = ecx

; 27   : 	  {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 		  return _m;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 29   : 	  }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetM@Random@@QAEHXZ ENDP				; Random::GetM
_TEXT	ENDS
PUBLIC	?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z ; RandomPeriodCalculator::SetRandom
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z
_TEXT	SEGMENT
$T25648 = -212						; size = 4
_this$ = -8						; size = 4
_random$ = 8						; size = 4
??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z PROC	; RandomPeriodCalculator::RandomPeriodCalculator, COMDAT
; _this$ = ecx

; 41   : 	RandomPeriodCalculator(Random *random)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Random@@QAE@HHHH@Z			; Random::Random

; 42   : 	{
; 43   : 		_sameElems = new int[random->GetM() * 4];

	mov	ecx, DWORD PTR _random$[ebp]
	call	?GetM@Random@@QAEHXZ			; Random::GetM
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T25648[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T25648[ebp]
	mov	DWORD PTR [eax+20], ecx

; 44   : 		SetRandom(random);

	mov	eax, DWORD PTR _random$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z ; RandomPeriodCalculator::SetRandom

; 45   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z ENDP	; RandomPeriodCalculator::RandomPeriodCalculator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_random$ = 8						; size = 4
?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z PROC ; RandomPeriodCalculator::SetRandom, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		_random = random;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _random$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z ENDP ; RandomPeriodCalculator::SetRandom
_TEXT	ENDS
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetPeriod@RandomPeriodCalculator@@QAEHPAH@Z
_TEXT	SEGMENT
$T25653 = -269						; size = 1
_i$24099 = -68						; size = 4
_total$ = -56						; size = 4
_foundPeriod$ = -44					; size = 4
_i$ = -32						; size = 4
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_periodVals$ = 8					; size = 4
?GetPeriod@RandomPeriodCalculator@@QAEHPAH@Z PROC	; RandomPeriodCalculator::GetPeriod, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T25653[ebp], 0

; 54   : 		_sameElems[0] = _random->Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Next@Random@@QAEHXZ			; Random::Next
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx], eax

; 55   : 
; 56   : 		int len;
; 57   : 		int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 58   : 		int foundPeriod = 0;

	mov	DWORD PTR _foundPeriod$[ebp], 0

; 59   : 		int total = 0;

	mov	DWORD PTR _total$[ebp], 0
$LN12@GetPeriod:

; 60   : 
; 61   : 		while (!foundPeriod)

	cmp	DWORD PTR _foundPeriod$[ebp], 0
	jne	$LN11@GetPeriod
$LN10@GetPeriod:

; 62   : 		{
; 63   : 			do 
; 64   : 			{
; 65   : 				_sameElems[++total] = _random->Next();

	mov	eax, DWORD PTR _total$[ebp]
	add	eax, 1
	mov	DWORD PTR _total$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?Next@Random@@QAEHXZ			; Random::Next
	mov	ecx, DWORD PTR _total$[ebp]
	mov	DWORD PTR [esi+ecx*4], eax

; 66   : 			} while (_sameElems[0] != _sameElems[total]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _total$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx*4]
	jne	SHORT $LN10@GetPeriod

; 67   : 
; 68   : 			len = total;

	mov	BYTE PTR $T25653[ebp], 1
	mov	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 69   : 			i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@GetPeriod:

; 70   : 			while (i < len)

	cmp	BYTE PTR $T25653[ebp], 0
	jne	SHORT $LN15@GetPeriod
	push	OFFSET $LN16@GetPeriod
	call	__RTC_UninitUse
	add	esp, 4
$LN15@GetPeriod:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN6@GetPeriod

; 71   : 			{
; 72   : 				if (_sameElems[i] != _sameElems[total])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _total$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	cmp	ecx, DWORD PTR [eax+esi*4]
	je	SHORT $LN5@GetPeriod

; 73   : 				{
; 74   : 					break;

	jmp	SHORT $LN6@GetPeriod
$LN5@GetPeriod:

; 75   : 				}
; 76   : 
; 77   : 				_sameElems[++total] = _random->Next();

	mov	eax, DWORD PTR _total$[ebp]
	add	eax, 1
	mov	DWORD PTR _total$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?Next@Random@@QAEHXZ			; Random::Next
	mov	ecx, DWORD PTR _total$[ebp]
	mov	DWORD PTR [esi+ecx*4], eax

; 78   : 				i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 79   : 			}

	jmp	SHORT $LN7@GetPeriod
$LN6@GetPeriod:

; 80   : 			if (i == len)

	cmp	BYTE PTR $T25653[ebp], 0
	jne	SHORT $LN17@GetPeriod
	push	OFFSET $LN16@GetPeriod
	call	__RTC_UninitUse
	add	esp, 4
$LN17@GetPeriod:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jne	SHORT $LN4@GetPeriod

; 81   : 			{
; 82   : 				foundPeriod = 1;

	mov	DWORD PTR _foundPeriod$[ebp], 1

; 83   : 				for (int i = 0; i < len; i++)

	mov	DWORD PTR _i$24099[ebp], 0
	jmp	SHORT $LN3@GetPeriod
$LN2@GetPeriod:
	mov	eax, DWORD PTR _i$24099[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24099[ebp], eax
$LN3@GetPeriod:
	cmp	BYTE PTR $T25653[ebp], 0
	jne	SHORT $LN18@GetPeriod
	push	OFFSET $LN16@GetPeriod
	call	__RTC_UninitUse
	add	esp, 4
$LN18@GetPeriod:
	mov	eax, DWORD PTR _i$24099[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@GetPeriod

; 84   : 					periodVals[i] = _sameElems[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _i$24099[ebp]
	mov	eax, DWORD PTR _periodVals$[ebp]
	mov	esi, DWORD PTR _i$24099[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@GetPeriod
$LN4@GetPeriod:

; 85   : 			}
; 86   : 		}

	jmp	$LN12@GetPeriod
$LN11@GetPeriod:

; 87   : 
; 88   : 		return len;

	cmp	BYTE PTR $T25653[ebp], 0
	jne	SHORT $LN19@GetPeriod
	push	OFFSET $LN16@GetPeriod
	call	__RTC_UninitUse
	add	esp, 4
$LN19@GetPeriod:
	mov	eax, DWORD PTR _len$[ebp]

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN20@GetPeriod:
$LN16@GetPeriod:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?GetPeriod@RandomPeriodCalculator@@QAEHPAH@Z ENDP	; RandomPeriodCalculator::GetPeriod
_TEXT	ENDS
END
