; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\Users\Vadim\Documents\Visual Studio 2010\Projects\Seniv_Lab1\Seniv_Lab1\Seniv_Lab1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??0Random@@QAE@HHHH@Z				; Random::Random
PUBLIC	?GetM@Random@@QAEHXZ				; Random::GetM
PUBLIC	?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z ; RandomPeriodCalculator::SetRandom
PUBLIC	??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z	; RandomPeriodCalculator::RandomPeriodCalculator
PUBLIC	?Next@Random@@QAEHXZ				; Random::Next
PUBLIC	?GetPeriod@RandomPeriodCalculator@@QAEHXZ	; RandomPeriodCalculator::GetPeriod
PUBLIC	??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_02CHHAKFFB@w?$CL?$AA@			; `string'
PUBLIC	??_C@_08GGBJDDCD@file?4txt?$AA@			; `string'
PUBLIC	??_C@_03IOBBOKCP@?6?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BG@HNJGDPDJ@?6Random?5period?5is?5?$CFd?6?$AA@ ; `string'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__imp_??2@YAPAXI@Z:PROC
EXTRN	__imp_??3@YAXPAX@Z:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp__printf:PROC
EXTRN	__imp__scanf:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
;	COMDAT ??_C@_0BG@HNJGDPDJ@?6Random?5period?5is?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BG@HNJGDPDJ@?6Random?5period?5is?5?$CFd?6?$AA@ DB 0aH, 'Random per'
	DB	'iod is %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IOBBOKCP@?6?$CFd?$AA@
CONST	SEGMENT
??_C@_03IOBBOKCP@?6?$CFd?$AA@ DB 0aH, '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGBJDDCD@file?4txt?$AA@
CONST	SEGMENT
??_C@_08GGBJDDCD@file?4txt?$AA@ DB 'file.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02CHHAKFFB@w?$CL?$AA@
CONST	SEGMENT
??_C@_02CHHAKFFB@w?$CL?$AA@ DB 'w+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@ DB 0aH, 'm = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@ DB 0aH, 'c = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@ DB 0aH, 'a = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@ DB 0aH, 'X0 = ', 00H	; `string'
; Function compile flags: /Ogtp
; File c:\users\vadim\documents\visual studio 2010\projects\seniv_lab1\seniv_lab1\random.h
CONST	ENDS
;	COMDAT ?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z
_TEXT	SEGMENT
?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z PROC ; RandomPeriodCalculator::SetRandom, COMDAT
; _this$ = eax
; _random$ = ecx

; 49   : 		_random = random;

	mov	DWORD PTR [eax+16], ecx

; 50   : 	}

	ret	0
?SetRandom@RandomPeriodCalculator@@QAEXPAVRandom@@@Z ENDP ; RandomPeriodCalculator::SetRandom
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetM@Random@@QAEHXZ
_TEXT	SEGMENT
?GetM@Random@@QAEHXZ PROC				; Random::GetM, COMDAT
; _this$ = eax

; 28   : 		return _m;

	mov	eax, DWORD PTR [eax+12]

; 29   : 	}

	ret	0
?GetM@Random@@QAEHXZ ENDP				; Random::GetM
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Next@Random@@QAEHXZ
_TEXT	SEGMENT
?Next@Random@@QAEHXZ PROC				; Random::Next, COMDAT
; _this$ = ecx

; 23   : 		return (_x = (_a * _x + _c) % _m);

	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [ecx+8]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	eax, edx
	mov	DWORD PTR [ecx], eax

; 24   : 	}

	ret	0
?Next@Random@@QAEHXZ ENDP				; Random::Next
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0Random@@QAE@HHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_c$ = 12						; size = 4
_m$ = 16						; size = 4
??0Random@@QAE@HHHH@Z PROC				; Random::Random, COMDAT
; _this$ = eax
; _x$ = ecx

; 14   : 	  _x(x), _a(a), _c(c), _m(m) {}

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _m$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebp
	ret	12					; 0000000cH
??0Random@@QAE@HHHH@Z ENDP				; Random::Random
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetPeriod@RandomPeriodCalculator@@QAEHXZ
_TEXT	SEGMENT
_len$ = -4						; size = 4
?GetPeriod@RandomPeriodCalculator@@QAEHXZ PROC		; RandomPeriodCalculator::GetPeriod, COMDAT
; _this$ = esi

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 54   : 		_sameElems[0] = _random->Next();

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [ecx+8]
	push	ebx
	cdq
	idiv	DWORD PTR [ecx+12]
	push	edi

; 55   : 
; 56   : 		int len;
; 57   : 		int i = 0;
; 58   : 		int foundPeriod = 0;
; 59   : 		int total = 0;

	xor	edi, edi
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [eax], edx
	npad	1
$LL7@GetPeriod:

; 62   : 		{
; 63   : 			do 
; 64   : 			{
; 65   : 				_sameElems[++total] = _random->Next();

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [ecx+8]
	inc	edi
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [ecx+edi*4], edx

; 66   : 			} while (_sameElems[0] != _sameElems[total]);

	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [eax+edi*4]
	jne	SHORT $LL7@GetPeriod

; 67   : 
; 68   : 			len = total;

	mov	eax, edi

; 69   : 			i = 0;

	xor	ebx, ebx
	mov	DWORD PTR _len$[ebp], eax

; 70   : 			while (i < len)

	test	edi, edi
	jle	SHORT $LN21@GetPeriod
	npad	2
$LL4@GetPeriod:

; 71   : 			{
; 72   : 				if (_sameElems[i] != (_sameElems[++total] = _random->Next()))

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx+4]
	imul	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [ecx+8]
	inc	edi
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+edi*4], edx
	mov	ecx, DWORD PTR [esi+20]
	cmp	DWORD PTR [ecx+ebx*4], edx
	jne	SHORT $LN26@GetPeriod

; 73   : 				{
; 74   : 					break;
; 75   : 				}
; 76   : 				i++;

	inc	ebx
	cmp	ebx, DWORD PTR _len$[ebp]
	jl	SHORT $LL4@GetPeriod
$LN26@GetPeriod:

; 70   : 			while (i < len)

	mov	eax, DWORD PTR _len$[ebp]
$LN21@GetPeriod:

; 77   : 			}
; 78   : 			if (i == len)

	cmp	ebx, eax

; 60   : 
; 61   : 		while (!foundPeriod)

	jne	SHORT $LL7@GetPeriod
	pop	edi
	pop	ebx

; 79   : 				foundPeriod = 1;
; 80   : 		}
; 81   : 	
; 82   : 		return len;
; 83   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPeriod@RandomPeriodCalculator@@QAEHXZ ENDP		; RandomPeriodCalculator::GetPeriod
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z
_TEXT	SEGMENT
??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z PROC	; RandomPeriodCalculator::RandomPeriodCalculator, COMDAT
; _this$ = esi
; _random$ = edi

; 41   : 	RandomPeriodCalculator(Random *random)

	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax

; 42   : 	{
; 43   : 		_sameElems = new int[random->GetM()];

	mov	eax, DWORD PTR [edi+12]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	mov	DWORD PTR [esi+20], eax
	add	esp, 4

; 44   : 		SetRandom(random);

	mov	DWORD PTR [esi+16], edi

; 45   : 	}

	mov	eax, esi
	ret	0
??0RandomPeriodCalculator@@QAE@PAVRandom@@@Z ENDP	; RandomPeriodCalculator::RandomPeriodCalculator
_TEXT	ENDS
PUBLIC	_wmain
; Function compile flags: /Ogtp
; File c:\users\vadim\documents\visual studio 2010\projects\seniv_lab1\seniv_lab1\seniv_lab1.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_m$ = -60						; size = 4
_c$ = -56						; size = 4
_a$ = -52						; size = 4
_x$ = -48						; size = 4
tv144 = -44						; size = 4
$T24819 = -44						; size = 4
__random$ = -40						; size = 16
__randomPeriod$ = -24					; size = 24
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 60					; 0000003cH
	push	ebx
	push	esi
	push	edi

; 22   : 	int x, a, c, m;
; 23   : 
; 24   : 	printf("\nX0 = ");

	mov	edi, DWORD PTR __imp__printf
	push	OFFSET ??_C@_06JOBKLAIM@?6X0?5?$DN?5?$AA@
	call	edi

; 25   : 	scanf("%d", &x);

	mov	esi, DWORD PTR __imp__scanf
	lea	eax, DWORD PTR _x$[esp+76]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	esi

; 26   : 
; 27   : 	printf("\na = ");

	push	OFFSET ??_C@_05FCPBNOJI@?6a?5?$DN?5?$AA@
	call	edi

; 28   : 	scanf("%d", &a);

	lea	ecx, DWORD PTR _a$[esp+88]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	esi

; 29   : 
; 30   : 	printf("\nc = ");

	push	OFFSET ??_C@_05CIDBINPI@?6c?5?$DN?5?$AA@
	call	edi

; 31   : 	scanf("%d", &c);

	lea	edx, DWORD PTR _c$[esp+100]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	esi

; 32   : 
; 33   : 	printf("\nm = ");

	push	OFFSET ??_C@_05JHABDDJJ@?6m?5?$DN?5?$AA@
	call	edi

; 34   : 	scanf("%d", &m);

	lea	eax, DWORD PTR _m$[esp+112]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	call	esi

; 35   : 
; 36   : // 	64, powi(2, 3), 8, powi(2, 15) - 1
; 37   : 	Random _random(x, a, c, m);

	mov	ecx, DWORD PTR _a$[esp+120]
	mov	edx, DWORD PTR _c$[esp+120]
	mov	eax, DWORD PTR _m$[esp+120]
	mov	esi, DWORD PTR _x$[esp+120]

; 38   : 	RandomPeriodCalculator _randomPeriod(new Random(x, a, c, m));

	push	16					; 00000010H
	mov	DWORD PTR __random$[esp+128], ecx
	mov	DWORD PTR __random$[esp+132], edx
	mov	DWORD PTR __random$[esp+136], eax
	call	DWORD PTR __imp_??2@YAPAXI@Z
	xor	ecx, ecx
	add	esp, 52					; 00000034H
	cmp	eax, ecx
	je	SHORT $LN6@wmain
	mov	edx, DWORD PTR _a$[esp+72]
	mov	ecx, DWORD PTR _m$[esp+72]
	mov	ebx, DWORD PTR _c$[esp+72]
	mov	DWORD PTR $T24819[esp+72], edx
	mov	edx, DWORD PTR _x$[esp+72]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR $T24819[esp+72]
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ebx, eax
	xor	ecx, ecx
	jmp	SHORT $LN7@wmain
$LN6@wmain:
	xor	ebx, ebx
$LN7@wmain:
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR __randomPeriod$[esp+72], ecx
	mov	DWORD PTR __randomPeriod$[esp+76], ecx
	mov	DWORD PTR __randomPeriod$[esp+80], ecx
	mov	DWORD PTR __randomPeriod$[esp+84], ecx
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 39   : 
; 40   : 	FILE *f = fopen("file.txt", "w+");

	push	OFFSET ??_C@_02CHHAKFFB@w?$CL?$AA@
	push	OFFSET ??_C@_08GGBJDDCD@file?4txt?$AA@
	mov	DWORD PTR __randomPeriod$[esp+104], eax
	mov	DWORD PTR __randomPeriod$[esp+100], ebx
	call	DWORD PTR __imp__fopen
	add	esp, 12					; 0000000cH
	mov	ebx, eax
	mov	DWORD PTR tv144[esp+72], 10000		; 00002710H
	npad	6
$LL3@wmain:

; 41   : 
; 42   : 	const int n = 10000;
; 43   : 	for (int i = 0; i < n; i++)
; 44   : 	{
; 45   : 		int randomVal = _random.Next();

	mov	eax, DWORD PTR __random$[esp+76]
	imul	eax, esi
	add	eax, DWORD PTR __random$[esp+80]
	cdq
	idiv	DWORD PTR __random$[esp+84]
	mov	esi, edx

; 46   : 		printf("\n%d", randomVal);

	push	esi
	push	OFFSET ??_C@_03IOBBOKCP@?6?$CFd?$AA@
	call	edi

; 47   : 		fprintf(f, "\n%d", randomVal);

	push	esi
	push	OFFSET ??_C@_03IOBBOKCP@?6?$CFd?$AA@
	push	ebx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	dec	DWORD PTR tv144[esp+72]
	jne	SHORT $LL3@wmain

; 48   : 	}
; 49   : 	fclose(f);

	push	ebx
	call	DWORD PTR __imp__fclose
	add	esp, 4

; 50   : 
; 51   : 	printf("\nRandom period is %d\n", _randomPeriod.GetPeriod());

	lea	esi, DWORD PTR __randomPeriod$[esp+72]
	call	?GetPeriod@RandomPeriodCalculator@@QAEHXZ ; RandomPeriodCalculator::GetPeriod
	push	eax
	push	OFFSET ??_C@_0BG@HNJGDPDJ@?6Random?5period?5is?5?$CFd?6?$AA@
	call	edi
	add	esp, 8

; 52   : 
; 53   : 	return 0;
; 54   : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_wmain	ENDP
_TEXT	ENDS
END
